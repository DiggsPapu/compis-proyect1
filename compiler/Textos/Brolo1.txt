var globalVar1 = 10;
var globalVar2 = "Global String";
var globalBoolean = true;

class Animal {
    fun init(type, sound) {
        this.type = type;
        this.sound = sound;
    }

    fun getType() {
        return this.type;
    }

    fun getSound() {
        return this.sound;
    }

    fun speak() {
        print this.type + " says: " + this.sound;
    }

    fun isSameType(otherType) {
        if (this.type == otherType) {
            return true;
        } else {
            return false;
        }
    }

    fun isQuiet() {
        return this.sound == nil;
    }
}

class Dog extends Animal {
    fun init(breed, sound) {
        this.breed = breed;
        this.sound = sound;
        this.type = "Dog";
    }

    fun getBreed() {
        return this.breed;
    }

    fun bark() {
        print this.breed + " barks: " + this.sound;
    }

    fun sit() {
        print this.breed + " is sitting.";
    }

    fun fetch() {
        print this.breed + " is fetching.";
    }

    fun isQuietBreed() {
        if (this.sound == nil) {
            return true;
        } else {
            return false;
        }
    }
}

var myDog = Dog();
myDog.init("Golden Retriever", "Woof");
myDog.bark();
myDog.sit();
myDog.fetch();

globalVar1 = 20;
print "Global Variable inside function: " + globalVar1;
print "Local Variable: " + globalVar1;

fun countToTen() {
    var i = 0;
    for (i = 0; i < 10; i = i + 1) {
        print i;
    }
}

fun findEvenNumber() {
    var i = 0;
    for (i = 0; i < 10; i = i + 1) {
        if (i % 2 == 0) {
            print i + " is even.";
            continue;
        }
        if (i == 7) {
            break;
        }
    }
}

fun countdown() {
    var i = 10;
    while (i > 0) {
        print i;
        i = i - 1;
    }
}

fun findFirstOdd() {
    var i = 10;
    while (i > 0) {
        i = i - 1;
        if (i % 2 != 0) {
            print i + " is odd.";
            break;
        }
    }
}

fun compareValues(a, b) {
    if (a > b) {
        print "a is greater than b";
    } else if (a < b) {
        print "a is less than b";
    } else {
        print "a is equal to b";
    }

    if (a == 10 and b == 20) {
        print "Both conditions met.";
    }

    if (globalBoolean or a > b) {
        print "At least one condition met.";
    }

    if (not (a == b)) {
        print "a is not equal to b";
    }
}

fun checkForNil() {
    var someVar = nil;
    if (someVar == nil) {
        print "someVar is nil";
    }
}

fun operationsDemo() {
    var boolResult = true and false;
    var numResult = 5 + 10;
    var stringResult = "Hello" + " World";
    var mixedResult = "Number: " + 10;

    print boolResult;
    print numResult;
    print stringResult;
    print mixedResult;
}

fun lateAssignment() {
    var lateVar;
    lateVar = 25;
    print lateVar;
}

fun addNumbers(x, y) {
    return x + y;
}

fun printMessage(message) {
    print message;
}

fun outerFunction() {
    fun innerFunction() {
        print "This is inside the inner function.";
    }
    innerFunction();
    print "This is inside the outer function.";
}

countToTen();
findEvenNumber();
countdown();
findFirstOdd();
compareValues(10, 20);
checkForNil();
operationsDemo();
lateAssignment();
print addNumbers(5, 15);
printMessage("Hello from CompiScript!");
outerFunction();
```

## Recursive test
This tests a recursive method:
```
class Ackermann {
    fun init() {
        // No initialization required for this class
    }

    fun ackermann(m, n) {
        if (m == 0) {
            return n + 1;
        } else if (m > 0 and n == 0) {
            return this.ackermann(m - 1, 1);
        } else {
            return this.ackermann(m - 1, this.ackermann(m, n - 1));
        }
    }
}

class AckermannTest {
    fun init() {
        this.ackermannObj = Ackermann();
    }

    fun runComplexTests() {
        var result1 = this.ackermannObj.ackermann(3, 6);
        print "Ackermann(3, 6) = " + result1;

        var result2 = this.ackermannObj.ackermann(2, 10);
        print "Ackermann(2, 10) = " + result2;

        var result3 = this.ackermannObj.ackermann(3, 4);
        print "Ackermann(3, 4) = " + result3;

        var result4 = this.ackermannObj.ackermann(2, 20);
        print "Ackermann(2, 20) = " + result4;
    }
}

var test = AckermannTest();
test.init();
test.runComplexTests();